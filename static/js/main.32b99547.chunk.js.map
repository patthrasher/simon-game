{"version":3,"sources":["index.js"],"names":["colors","status","clickCount","numSequence","max","nums","i","push","Math","floor","random","getNumSequence","colorSequence","seq","colorSeq","length","getColorSequence","console","log","Game","state","turn","element","className","callbackFunction","setTimeout","classList","toggle","pieces","Array","from","document","querySelectorAll","scheduleAnimation","color","animate","bind","piece","getElementById","this","check","setState","onClick","reloadPage","start","slice","window","location","reload","map","id","React","Component","ReactDOM","render"],"mappings":"yNAIMA,EAAS,CAAC,QAAS,MAAO,SAAU,QACtCC,EAAS,GACTC,EAAa,EAsBjB,IAAIC,EAhBJ,WAEE,IADA,IALiBC,EAKbC,EAAO,GACFC,EAAE,EAAGA,GAAG,GAAIA,IACnBD,EAAKE,MAPUH,EAOK,EANfI,KAAKC,MAAMD,KAAKE,SAAWN,KAQlC,OAAOC,EAWSM,GACdC,EATJ,SAA0BC,GAExB,IADA,IAAIC,EAAW,GACNR,EAAE,EAAGA,EAAEO,EAAIE,OAAQT,IAC1BQ,EAASP,KAAKP,EAAOa,EAAIP,KAE3B,OAAOQ,EAIWE,CAAiBb,GACrCc,QAAQC,IAAIf,GACZc,QAAQC,IAAIN,G,IAGNO,E,kDACF,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTpB,OAAQY,EACRS,KAAM,GALA,E,2CAWhB,SAAQC,EAASC,EAAWC,GAC1BC,YAAW,WACTH,EAAQI,UAAUC,OAAOJ,GACzBE,YAAW,WACTH,EAAQI,UAAUC,OAAOJ,GACrBC,GACFA,MAED,OACF,O,mBAIL,SAAMX,GAAM,IAAD,OACDe,EAASC,MAAMC,KAAKC,SAASC,iBAAiB,iBAC1B,SAApBC,EAAqB3B,GACzB,IAAMgB,EAAUM,EAAOf,EAAIP,IACrB4B,EAAQ,EAAKd,MAAMpB,OAAOM,GAC3BgB,GAAWY,GACd,EAAKC,QAAQb,EAASY,EAAOD,EAAkBG,KAAK,IAAQ9B,IAGjE2B,CAAkB,K,kBAGrB,SAAK3B,GAAI,IAAD,OACA+B,EAAQN,SAASO,eAAehC,GAEtC,IAAKiC,KAAKC,MAAMlC,EAAGJ,GAOjB,OANAA,EAAa,EACbqC,KAAKE,SAAS,CACZpB,KAAM,SAGRpB,EAAS,wBAAQsB,UAAU,mBAAmBmB,QAAS,kBAAM,EAAKC,cAAzD,sCAIe,WACxB,IAAMT,EAAQlC,EAAOM,GACjB4B,GACF,EAAKC,QAAQE,EAAOH,GAGxBD,IAEA/B,GAAc,KAEKqC,KAAKnB,MAAMC,OAC5BkB,KAAKE,UAAS,SAAArB,GAAK,MAAK,CACtBC,KAAMD,EAAMC,KAAO,MAErBI,YAAW,WACT,EAAKmB,MAAMzC,EAAY0C,MAAM,EAAG,EAAKzB,MAAMC,SAC1C,MACHnB,EAAa,K,mBAKjB,SAAMmC,EAAOnC,GAGX,OAFwBC,EAAY0C,MAAM,EAAGN,KAAKnB,MAAMC,MAEpCnB,KAAgBmC,I,wBAMtC,WACES,OAAOC,SAASC,W,oBAGlB,WAAU,IAAD,OACL,OACA,sBAAKzB,UAAU,iBAAf,UACE,mDACC,CAAC,EAAE,EAAE,EAAE,GAAG0B,KAAI,SAAC3C,GACd,OAAO,qBAAa4C,GAAI5C,EAAGiB,UAAU,aAAamB,QAAS,kBAAM,EAAKrB,KAAKf,KAA1DA,MAEnB,4BAAIL,IACJ,qBAAKsB,UAAU,aAAf,SAA4B,wBAAQmB,QAAS,kBAAM,EAAKE,MAAMzC,EAAY0C,MAAM,EAAE,EAAKzB,MAAMC,QAAQE,UAAU,eAAnF,iD,GA7FjB4B,IAAMC,WAmGzBC,IAASC,OACL,cAACnC,EAAD,IACAY,SAASO,eAAe,W","file":"static/js/main.32b99547.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst colors = ['green', 'red', 'yellow', 'blue'];\nlet status = '';\nlet clickCount = 0;\n\nfunction getRandom(max) {\n  return Math.floor(Math.random() * max)\n}\n\nfunction getNumSequence() {\n  let nums = []\n  for (let i=0; i<=20; i++) {\n    nums.push(getRandom(4));\n  }\n  return nums\n}\n\nfunction getColorSequence(seq) {\n  let colorSeq = []\n  for (let i=0; i<seq.length; i++) {\n    colorSeq.push(colors[seq[i]]);\n  }\n  return colorSeq;\n}\n\nlet numSequence = getNumSequence();\nlet colorSequence = getColorSequence(numSequence);\nconsole.log(numSequence);\nconsole.log(colorSequence);\n\n\nclass Game extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            colors: colorSequence,\n            turn: 1,\n        }\n    }\n\n\n\n  animate(element, className, callbackFunction){\n    setTimeout(() => {\n      element.classList.toggle(className);\n      setTimeout(() => {\n        element.classList.toggle(className);\n        if (callbackFunction) {\n          callbackFunction();\n        }\n      }, 300)\n    }, 500);\n  }\n\n\n  start(seq) {\n      const pieces = Array.from(document.querySelectorAll('.game-piece'));\n      const scheduleAnimation = (i) => {\n        const element = pieces[seq[i]];\n        const color = this.state.colors[i];\n        if ( element && color ) {\n          this.animate(element, color, scheduleAnimation.bind(this, ++i));\n        }\n      }\n     scheduleAnimation(0);\n   }\n\n  turn(i) {\n    const piece = document.getElementById(i);\n\n    if (!this.check(i, clickCount)) {\n      clickCount = 0\n      this.setState({\n        turn: 0,\n      });\n\n      status = <button className='game-over-button' onClick={() => this.reloadPage()}>GAME OVER - Try Again?</button>\n      return;\n    }\n\n    const scheduleAnimation = () => {\n      const color = colors[i];\n      if (color) {\n        this.animate(piece, color);\n      }\n    }\n    scheduleAnimation(i);\n\n    clickCount += 1;\n\n    if (clickCount === this.state.turn) {\n      this.setState(state => ({\n        turn: state.turn + 1,\n      }));\n      setTimeout(() => {\n        this.start(numSequence.slice(0, this.state.turn))\n      }, 1500);\n      clickCount = 0;\n    }\n  }\n\n\n  check(piece, clickCount) {\n    const correctClickSeq = numSequence.slice(0, this.state.turn);\n\n    if (correctClickSeq[clickCount] !== piece) {\n        return false;\n    }\n    return true;\n  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n\n  render() {\n      return (\n      <div className=\"game-container\">\n        <h1>Simon Memory Game</h1>\n        {[0,1,2,3].map((i) => {\n          return <div key={i} id={i} className='game-piece' onClick={() => this.turn(i)}></div>\n        })}\n        <p>{status}</p>\n        <div className='button-pad'><button onClick={() => this.start(numSequence.slice(0,this.state.turn))} className=\"start-button\">Start Game (you got this!)</button></div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n"],"sourceRoot":""}