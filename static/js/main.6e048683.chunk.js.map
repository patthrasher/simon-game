{"version":3,"sources":["index.js"],"names":["colors","status","index","numSequence","max","nums","i","push","Math","floor","random","getNumSequence","colorSequence","seq","colorSeq","length","getColorSequence","console","log","App","state","turn","element","className","callback","setTimeout","classList","toggle","this","pieces","Array","from","document","querySelectorAll","scheduleAnimation","color","animate","bind","window","location","reload","piece","getElementById","check","setState","onClick","reloadPage","start","slice","correctClickSeq","map","id","React","Component","ReactDOM","render"],"mappings":"yNAqOMA,EAAS,CAAC,QAAS,MAAO,SAAU,QACtCC,EAAS,GACTC,EAAQ,EA0BZ,IAAIC,EApBJ,WAEE,IADA,IALiBC,EAKbC,EAAO,GACFC,EAAE,EAAGA,GAAG,GAAIA,IACnBD,EAAKE,MAPUH,EAOK,EANfI,KAAKC,MAAMD,KAAKE,SAAWN,KAQlC,OAAOC,EAeSM,GACdC,EATJ,SAA0BC,GAExB,IADA,IAAIC,EAAW,GACNR,EAAE,EAAGA,EAAEO,EAAIE,OAAQT,IAC1BQ,EAASP,KAAKP,EAAOa,EAAIP,KAE3B,OAAOQ,EAIWE,CAAiBb,GACrCc,QAAQC,IAAIf,GACZc,QAAQC,IAAIN,G,IAENO,E,kDACF,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTpB,OAAQY,EACRS,KAAM,GALA,E,2CAWhB,SAAQC,EAASC,EAAWC,GAC1BP,QAAQC,IAAI,mBACZO,YAAW,WACTH,EAAQI,UAAUC,OAAOJ,GACzBE,YAAW,WACTH,EAAQI,UAAUC,OAAOJ,GACrBC,GACFA,MAED,OACF,O,mBAIL,SAAMX,GAAM,IAAD,OACPI,QAAQC,IAAI,eACZD,QAAQC,IAAIU,KAAKR,MAAMC,MACvB,IAAMQ,EAASC,MAAMC,KAAKC,SAASC,iBAAiB,iBAC1B,SAApBC,EAAqB5B,GACzB,IAAMgB,EAAUO,EAAOhB,EAAIP,IACrB6B,EAAQ,EAAKf,MAAMpB,OAAOM,GAC3BgB,GAAWa,GACd,EAAKC,QAAQd,EAASa,EAAOD,EAAkBG,KAAK,IAAQ/B,IAGjE4B,CAAkB,K,wBAwBrB,WACEI,OAAOC,SAASC,W,kBAGlB,SAAKlC,GAAI,IAAD,OAEAmC,EAAQT,SAASU,eAAepC,GAGtC,GAFAW,QAAQC,IAAIuB,IAEPb,KAAKe,MAAMrC,EAAGJ,GAOjB,OANAe,QAAQC,IAAI,QACZhB,EAAQ,EACR0B,KAAKgB,SAAS,CACZvB,KAAM,SAERpB,EAAS,wBAAQsB,UAAU,UAAUsB,QAAS,kBAAM,EAAKC,cAAhD,qCAGT7B,QAAQC,IAAI,0BAGY,WACxB,IAAMiB,EAAQnC,EAAOM,GAChB6B,GACH,EAAKC,QAAQK,EAAON,GAGxBD,IAIAhC,GAAS,KAEK0B,KAAKR,MAAMC,OACvBO,KAAKgB,UAAS,SAAAxB,GAAK,MAAK,CACtBC,KAAMD,EAAMC,KAAO,MAErBI,YAAW,WACT,EAAKsB,MAAM5C,EAAY6C,MAAM,EAAG,EAAK5B,MAAMC,SAC1C,MACHnB,EAAQ,K,mBAKZ,SAAMuC,EAAOvC,GACX,IAAM+C,EAAkB9C,EAAY6C,MAAM,EAAGpB,KAAKR,MAAMC,MAIxD,OAFAJ,QAAQC,IAAI,kBAAoB+B,EAAgB/C,GAAQuC,GAEpDQ,EAAgB/C,KAAWuC,I,oBAMjC,WAAU,IAAD,OAGL,OACA,sBAAKlB,UAAU,cAAf,UACE,oBAAIA,UAAU,SAAd,+BACC,CAAC,EAAE,EAAE,EAAE,GAAG2B,KAAI,SAAC5C,GACd,OAAO,qBAAa6C,GAAI7C,EAAGiB,UAAU,aAAasB,QAAS,kBAAM,EAAKxB,KAAKf,KAA1DA,MAEnB,4BAAIL,IACJ,wBAAQ4C,QAAS,kBAAM,EAAKE,MAAM5C,EAAY6C,MAAM,EAAE,EAAK5B,MAAMC,QAAQE,UAAU,aAAnF,+C,GA/HU6B,IAAMC,WAuIxBC,IAASC,OACL,cAACpC,EAAD,IACAa,SAASU,eAAe,W","file":"static/js/main.6e048683.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// const colors = ['green', 'red', 'yellow', 'blue'];\n//\n// function getRandom(max) {\n//   return Math.floor(Math.random() * max)\n// }\n//\n// function getNumSequence() {\n//   let nums = []\n//   for (let i=0; i<=3; i++) {\n//     nums.push(getRandom(4));\n//   }\n//   return nums\n// }\n//\n//\n// function getColorSequence(seq) {\n//   let colorSeq = []\n//   for (let i=0; i<seq.length; i++) {\n//     colorSeq.push(colors[numSequence[i]]);\n//   }\n//   return colorSeq;\n// }\n//\n// const numSequence = getNumSequence();\n// const colorSequence = getColorSequence(numSequence);\n// console.log(numSequence);\n// console.log(colorSequence);\n//\n// let turnSequence = [];\n// let status = 'no status yet';\n//\n//\n//\n// class Square extends React.Component {\n//\n//\n//   render() {\n//     return (\n//       <div>\n//         <div\n//           className={`square ${this.props.isLit ? this.props.light : 'lit-'}`}\n//           onClick={() => this.props.toggleColor()}>\n//           {this.props.squaresBoard}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n//\n// // function Square(props){\n// //\n// //   return (\n// //     <div>\n// //       <div\n// //         className={`square ${props.isLit ? this.props.light : 'lit-'}`}\n// //         onClick={() => props.toggleColor()}>\n// //         {props.squaresBoard}\n// //       </div>\n// //     </div>\n// //   )\n// // }\n//\n// class Board extends React.Component {\n//\n//   renderSquare(i) {\n//     return (\n//       <Square\n//         i={i}\n//         onClickBoard={() => this.props.onClickGame(i)}\n//         squaresBoard={this.props.squaresGame[i]}\n//         toggleColor={() => this.props.toggleColor(i)}\n//         isLit={this.props.isLit}\n//         light={this.props.lights[i]}\n//       />\n//     );\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(0)}\n//           {this.renderSquare(1)}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(2)}\n//           {this.renderSquare(3)}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n//\n// class Game extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       squares: ['green', 'red', 'yellow', 'blue'],\n//       whichTurn: 0,\n//       counter: 1,\n//       isLit: false,\n//       lights: ['lit-', 'lit-', 'lit-', 'lit-'],\n//     };\n//     this.toggleColor = this.toggleColor.bind(this);\n//   }\n//\n//   turn(iTurn) {\n//     console.log(iTurn);\n//\n//     const squaresSlice = this.state.squares.slice();\n//     squaresSlice[iTurn] = colors[iTurn];\n//\n//     this.setState(state => ({\n//       squares: squaresSlice,\n//       counter: state.counter + 1\n//     }));\n//     setTimeout(function() {\n//       this.setState({\n//         squares: ['lightgreen', 'pink', 'lightyellow', 'lightblue']\n//       });\n//     }.bind(this), 500);\n//\n//     // if (colors[iTurn] !== sequence[0]) {\n//     //   console.log('GAME OVER BUD');\n//     // }\n//     turnSequence.push(colors[iTurn]);\n//     console.log('TURN SEQ: ' +  turnSequence);\n//\n//     this.isCorrect();\n//   }\n//\n//   toggleColor(iTurn) {\n//     console.log('toggle activate' + iTurn)\n//\n//     // const squaresSlice = this.state.squares.slice();\n//     const lightsSlice = this.state.lights.slice();\n//     lightsSlice[iTurn] = lightsSlice[iTurn] + colors[iTurn]\n//     console.log(lightsSlice);\n//\n//     let x = colors[iTurn];\n//     console.log('xxxxxxx' + x);\n//\n//     this.setState( state => ({\n//       isLit: !this.state.isLit,\n//       lights: lightsSlice,\n//       counter: state.counter + 1\n//\n//     }));\n//\n//     setTimeout(function() {\n//       this.setState({\n//         lights: ['lit-', 'lit-', 'lit-', 'lit-'],\n//         isLit: !this.state.isLit,\n//       });\n//     }.bind(this), 500);\n//\n//\n//     turnSequence.push(colors[iTurn]);\n//     console.log('TURN SEQ: ' +  turnSequence);\n//\n//     this.isCorrect();\n//\n//   };\n//\n//   compTurn(turn) {\n//     const lightsSlice = this.state.lights.slice();\n//     lightsSlice[numSequence[turn]] = lightsSlice[turn] + colors[numSequence[turn]];\n//\n//     this.setState( state => ({\n//       isLit: !this.state.isLit,\n//       lights: lightsSlice,\n//       counter: state.counter + 1,\n//       whichTurn: state.whichTurn + 1,\n//     }));\n//\n//     setTimeout(function() {\n//       this.setState({\n//         lights: ['lit-', 'lit-', 'lit-', 'lit-'],\n//         isLit: !this.state.isLit,\n//       });\n//     }.bind(this), 500);\n//     console.log(lightsSlice);\n//   }\n//\n//   isCorrect() {\n//     const sequenceSlice = colorSequence.slice(0, this.state.counter);\n//     console.log(\"sequenceSlice herer:\" + sequenceSlice);\n//\n//     for (let b=0; b<sequenceSlice.length; b++) {\n//       console.log('thisisindex: ' + b)\n//       if (turnSequence[b] !== sequenceSlice[b]) {\n//         console.log('one didnt match buster');\n//         status = 'GAME OVER';\n//         return false;\n//       }\n//       status = 'Good so far';\n//     }\n//   }\n//\n//   render() {\n//\n//     return (\n//       <div>\n//         <h1>Simon Simon</h1>\n//         <Board\n//         onClickGame={(iGame) => this.turn(iGame)}\n//         squaresGame={this.state.squares}\n//         toggleColor={(som) => this.toggleColor(som)}\n//         isLit={this.state.isLit}\n//         color={this.state.color}\n//         lights={this.state.lights}\n//         />\n//         <button onClick={(so) => this.compTurn(this.state.whichTurn)}>Start Game</button>\n//         {colorSequence.join(', ')}\n//         <p>COUNTER: {this.state.counter}</p>\n//         <p>Winner? : {status}</p>\n//\n//\n//         {console.log(this.state.isLit)}\n//       </div>\n//     )\n//   }\n// }\n\nconst colors = ['green', 'red', 'yellow', 'blue'];\nlet status = '';\nlet index = 0;\n\nfunction getRandom(max) {\n  return Math.floor(Math.random() * max)\n}\n\nfunction getNumSequence() {\n  let nums = []\n  for (let i=0; i<=20; i++) {\n    nums.push(getRandom(4));\n  }\n  return nums\n}\n\n\n// deal with double clicking? Sound? Change look of buttons/background?\n// Change variable names etc?\n\nfunction getColorSequence(seq) {\n  let colorSeq = []\n  for (let i=0; i<seq.length; i++) {\n    colorSeq.push(colors[seq[i]]);\n  }\n  return colorSeq;\n}\n\nlet numSequence = getNumSequence();\nlet colorSequence = getColorSequence(numSequence);\nconsole.log(numSequence);\nconsole.log(colorSequence);\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            colors: colorSequence,\n            turn: 1,\n        }\n    }\n\n\n\n  animate(element, className, callback){\n    console.log('calling animate')\n    setTimeout(() => {\n      element.classList.toggle(className);\n      setTimeout(() => {\n        element.classList.toggle(className);\n        if (callback) {\n          callback();\n        }\n      }, 300)\n    }, 500);\n  }\n\n\n  start(seq) {\n      console.log('ITISANIMATE');\n      console.log(this.state.turn);\n      const pieces = Array.from(document.querySelectorAll('.game-piece'));\n      const scheduleAnimation = (i) => {\n        const element = pieces[seq[i]];\n        const color = this.state.colors[i];\n        if ( element && color ) {\n          this.animate(element, color, scheduleAnimation.bind(this, ++i));\n        }\n      }\n     scheduleAnimation(0);\n   }\n\n  //  startNew() {\n  //    numSequence = getNumSequence();\n  //    colorSequence = getColorSequence(numSequence);\n  //\n  //    console.log(numSequence);\n  //    console.log(colorSequence);\n  //\n  //    console.log('ITISANIMATE');\n  //    console.log(this.state.turn);\n  //    const pieces = Array.from(document.querySelectorAll('.game-piece'));\n  //    const scheduleAnimation = (i) => {\n  //      const element = pieces[seq[i]];\n  //      const color = this.state.colors[i];\n  //      if ( element && color ) {\n  //        this.animate(element, color, scheduleAnimation.bind(this, ++i));\n  //      }\n  //    }\n  //   scheduleAnimation(0);\n  // }\n  //  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n\n  turn(i) {\n\n    const piece = document.getElementById(i);\n    console.log(piece)\n\n    if (!this.check(i, index)) {\n      console.log('DONE');\n      index = 0\n      this.setState({\n        turn: 0,\n      });\n      status = <button className='restart' onClick={() => this.reloadPage()}>GAME OVER - Try Again?</button>\n      return;\n    } else {\n      console.log('still goooooooooooood');\n    }\n\n    const scheduleAnimation = () => {\n      const color = colors[i];\n      if ( color ) {\n        this.animate(piece, color);\n      }\n    }\n    scheduleAnimation(i);\n\n\n\n    index += 1;\n\n    if (index === this.state.turn) {\n      this.setState(state => ({\n        turn: state.turn + 1,\n      }));\n      setTimeout(() => {\n        this.start(numSequence.slice(0, this.state.turn))\n      }, 1500);\n      index = 0;\n    }\n  }\n\n\n  check(piece, index) {\n    const correctClickSeq = numSequence.slice(0, this.state.turn);\n\n    console.log('correct + piec ' + correctClickSeq[index], piece)\n\n    if (correctClickSeq[index] !== piece) {\n        return false;\n    }\n    return true;\n  }\n\n  render() {\n\n\n      return (\n      <div className=\"memory-game\">\n        <h1 className='header'>Simon Memory Game</h1>\n        {[0,1,2,3].map((i) => {\n          return <div key={i} id={i} className='game-piece' onClick={() => this.turn(i)}></div>\n        })}\n        <p>{status}</p>\n        <button onClick={() => this.start(numSequence.slice(0,this.state.turn))} className=\"start-game\">Start Game (you got this!)</button>\n      </div>\n    )\n  }\n}\n\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n"],"sourceRoot":""}